// Generated by CoffeeScript 1.3.3

/*
License agreements:
1) Feel free to modify the code.
2) Feel free to credit the author.
3) Keep being awesome.

Keypress
A keyboard input capturing utility in which any key can be a modifier key.
Requires jQuery
Author: David Mauro
*/


(function() {
  var key, _, _active_combos, _add_to_active_combos, _allow_key_repeat, _bug_catcher, _combo_defaults, _compare_arrays, _convert_key_to_readable, _decide_meta_key, _event_classname, _fire, _get_active_combo, _is_potentially_in_combo, _key_down, _key_up, _keycode_dictionary, _keys_down, _keys_remain, _match_combo_arrays, _metakey, _modifier_keys, _prevent_capture, _prevent_default, _receive_input, _registered_combos, _remove_from_active_combos, _valid_keys, _validate_combo,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _registered_combos = [];

  _keys_down = [];

  _active_combos = [];

  _prevent_capture = false;

  _event_classname = "keypress_events";

  _metakey = "ctrl";

  _modifier_keys = ["meta", "alt", "option", "ctrl", "shift", "cmd"];

  _valid_keys = [];

  _combo_defaults = {
    keys: [],
    count: 0,
    fire_on_keyup: false,
    is_ordered: false,
    is_counting: false,
    prevent_repeat: false,
    keyup_fired: false,
    on_keyup: null,
    on_keydown: null,
    on_release: null
  };

  _compare_arrays = function(a1, a2) {
    var item, _i, _j, _len, _len1;
    if (a1.length !== a2.length) {
      return false;
    }
    for (_i = 0, _len = a1.length; _i < _len; _i++) {
      item = a1[_i];
      if (__indexOf.call(a2, item) >= 0) {
        continue;
      }
      return false;
    }
    for (_j = 0, _len1 = a2.length; _j < _len1; _j++) {
      item = a2[_j];
      if (__indexOf.call(a1, item) >= 0) {
        continue;
      }
      return false;
    }
    return true;
  };

  _prevent_default = function(e) {
    return e.preventDefault();
  };

  _allow_key_repeat = function(combo) {
    if (combo.prevent_repeat) {
      return false;
    }
    if (typeof combo.on_keydown === "function") {
      return true;
    }
  };

  _keys_remain = function(combo) {
    var key, keys_remain, _i, _len, _ref;
    _ref = combo.keys;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if (__indexOf.call(_keys_down, key) >= 0) {
        keys_remain = true;
        break;
      }
    }
    return keys_remain;
  };

  _fire = function(event, combo) {
    if (typeof combo["on_" + event] === "function") {
      combo["on_" + event]();
    }
    if (event === "keyup") {
      return combo.keyup_fired = true;
    }
  };

  _match_combo_arrays = function(potential_match, source_combo_array, allow_partial_match) {
    var source_combo, _i, _len;
    if (allow_partial_match == null) {
      allow_partial_match = false;
    }
    for (_i = 0, _len = source_combo_array.length; _i < _len; _i++) {
      source_combo = source_combo_array[_i];
      if (source_combo.is_ordered) {
        if (potential_match.join("") === source_combo.keys.join("")) {
          return source_combo;
        }
        if (allow_partial_match && potential_match.join("") === source_combo.keys.slice(0, potential_match.length).join("")) {
          return source_combo;
        }
      } else {
        if (_compare_arrays(potential_match, source_combo.keys)) {
          return source_combo;
        }
        if (allow_partial_match && _compare_arrays(potential_match, source_combo.keys.slice(0, potential_match.length))) {
          return source_combo;
        }
      }
    }
    return false;
  };

  _get_active_combo = function(key) {
    var fuzzy_match, i, keys_down, keys_down_partial, perfect_match, potentials, _i, _ref;
    keys_down = _keys_down.slice();
    keys_down.push(key);
    perfect_match = _match_combo_arrays(keys_down, _registered_combos);
    if (perfect_match) {
      return perfect_match;
    }
    potentials = [];
    for (i = _i = 1, _ref = keys_down.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      keys_down_partial = keys_down.slice(-i);
      fuzzy_match = _match_combo_arrays(keys_down_partial, _registered_combos);
      if (fuzzy_match) {
        potentials.push(fuzzy_match);
      }
    }
    if (!potentials.length) {
      return false;
    }
    if (potentials.length > 1) {
      potentials.sort(function(a, b) {
        return b.keys.length - a.keys.length;
      });
    }
    return potentials[0];
  };

  _is_potentially_in_combo = function(key) {
    var combo, _i, _len;
    for (_i = 0, _len = _registered_combos.length; _i < _len; _i++) {
      combo = _registered_combos[_i];
      if (__indexOf.call(combo.keys, key) >= 0) {
        return true;
      }
    }
    return false;
  };

  _add_to_active_combos = function(combo, key) {
    var i, keys, replaced, _i, _ref;
    replaced = false;
    if (__indexOf.call(_active_combos, combo) >= 0) {
      return false;
    } else if (_active_combos.length) {
      for (i = _i = 0, _ref = _active_combos.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        console.log(i, _active_combos, combo);
        keys = _active_combos[i].keys.slice();
        keys.push(key);
        if (_compare_arrays(keys, combo.keys)) {
          _active_combos.splice(i, 1, combo);
          replaced = true;
          break;
        }
      }
    }
    if (!replaced) {
      console.log("adding to active combos", combo);
      _active_combos.push(combo);
    }
    return true;
  };

  _remove_from_active_combos = function(combo) {
    var active_combo, i, _i, _ref;
    for (i = _i = 0, _ref = _active_combos.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      active_combo = _active_combos[i];
      if (active_combo === combo) {
        _active_combos.splice(i, 1);
        break;
      }
    }
  };

  _key_down = function(key, e) {
    var combo;
    combo = _get_active_combo(key);
    if (combo || _is_potentially_in_combo(key)) {
      _prevent_default(e);
    }
    if (__indexOf.call(_keys_down, key) >= 0) {
      if (!_allow_key_repeat(combo)) {
        return false;
      }
    } else {
      _keys_down.push(key);
    }
    if (!combo) {
      return false;
    }
    _add_to_active_combos(combo, key);
    combo.keyup_fired = false;
    _fire("keydown", combo);
  };

  _key_up = function(key) {
    var active_combo, combo, i, keys_remaining, _i, _j, _len, _ref;
    if (__indexOf.call(_keys_down, key) < 0) {
      return false;
    }
    for (i = _i = 0, _ref = _keys_down.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (key === _keys_down[i]) {
        _keys_down.splice(i, 1);
        break;
      }
    }
    for (_j = 0, _len = _active_combos.length; _j < _len; _j++) {
      active_combo = _active_combos[_j];
      if (__indexOf.call(active_combo.keys, key) >= 0) {
        combo = active_combo;
        break;
      }
    }
    if (!combo) {
      return;
    }
    keys_remaining = _keys_remain(combo);
    if (!combo.keyup_fired && (!combo.is_counting || (combo.is_counting && keys_remaining))) {
      _fire("keyup", combo);
      if (combo.is_counting) {
        combo.count += 1;
      }
    }
    if (!keys_remaining) {
      if (combo.is_counting) {
        _fire("release", combo);
        combo.count = 0;
      }
      _remove_from_active_combos(combo);
    }
  };

  _receive_input = function(e, is_keydown) {
    var key;
    if (_prevent_capture) {
      if (_keys_down.length) {
        _keys_down = [];
      }
      return;
    }
    if (!is_keydown && !_keys_down.length) {
      return;
    }
    key = _convert_key_to_readable(e.keyCode);
    if (!key) {
      return;
    }
    if (is_keydown) {
      return _key_down(key, e);
    } else {
      return _key_up(key);
    }
  };

  _validate_combo = function(combo) {
    var i, key, mod_key, non_modifier_keys, _i, _j, _k, _len, _len1, _ref, _ref1;
    for (i = _i = 0, _ref = combo.keys.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      key = combo.keys[i];
      if (key === "meta" || key === "cmd") {
        combo.keys.splice(i, 1, _metakey);
        if (key === "cmd") {
          console.log("Warning: use the \"meta\" key rather than \"cmd\" for Windows compatibility");
        }
      }
    }
    _ref1 = combo.keys;
    for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
      key = _ref1[_j];
      if (__indexOf.call(_valid_keys, key) < 0) {
        console.log("Do not recognize the key \"" + key + "\"");
        return false;
      }
    }
    if (__indexOf.call(combo.keys, "meta") >= 0 || __indexOf.call(combo.keys, "cmd") >= 0) {
      non_modifier_keys = combo.keys.slice();
      for (_k = 0, _len1 = _modifier_keys.length; _k < _len1; _k++) {
        mod_key = _modifier_keys[_k];
        if ((i = non_modifier_keys.indexOf(mod_key)) > -1) {
          non_modifier_keys.splice(i, 1);
        }
      }
      if (non_modifier_keys.length > 1) {
        console.log("META and CMD key combos cannot have more than 1 non-modifier keys", combo, non_modifier_keys);
        return true;
      }
    }
    return true;
  };

  _decide_meta_key = function() {
    if (navigator.userAgent.indexOf("Mac OS X") !== -1) {
      _metakey = "cmd";
    }
  };

  _bug_catcher = function(e) {
    var _ref;
    if (__indexOf.call(_keys_down, "cmd") >= 0 && ((_ref = _convert_key_to_readable(e.keyCode)) !== "cmd" && _ref !== "shift" && _ref !== "alt")) {
      return _receive_input(e, false);
    }
  };

  window.keypress = {};

  keypress.wire = function() {
    _decide_meta_key();
    $('body').bind("keydown." + _event_classname, function(e) {
      _receive_input(e, true);
      return _bug_catcher(e);
    }).bind("keyup." + _event_classname, function(e) {
      return _receive_input(e, false);
    });
    return $(window).bind("blur." + _event_classname, function() {
      var _valid_combos;
      _keys_down = [];
      return _valid_combos = [];
    });
  };

  keypress.combo = function(keys_array, callback) {
    return keypress.register_combo({
      keys: keys_array,
      on_keydown: callback
    });
  };

  keypress.register_many_combos = function(combo_array) {
    var combo, _i, _len;
    for (_i = 0, _len = combo_array.length; _i < _len; _i++) {
      combo = combo_array[_i];
      keypress.register_combo(combo);
    }
    return true;
  };

  keypress.register_combo = function(combo) {
    $.extend(true, {}, _combo_defaults, combo);
    if (_validate_combo(combo)) {
      _registered_combos.push(combo);
      return true;
    }
  };

  keypress.listen = function() {
    return _prevent_capture = false;
  };

  keypress.stop_listening = function() {
    return _prevent_capture = true;
  };

  _convert_key_to_readable = function(k) {
    return _keycode_dictionary[k];
  };

  _keycode_dictionary = {
    8: "backspace",
    9: "tab",
    13: "enter",
    16: "shift",
    17: "ctrl",
    18: "alt",
    19: "pause",
    20: "caps",
    27: "escape",
    32: "space",
    33: "pageup",
    34: "pagedown",
    35: "end",
    36: "home",
    37: "left",
    38: "up",
    39: "right",
    40: "down",
    45: "insert",
    46: "delete",
    49: "1",
    50: "2",
    51: "3",
    52: "4",
    53: "5",
    54: "6",
    55: "7",
    56: "8",
    57: "9",
    65: "a",
    66: "b",
    67: "c",
    68: "d",
    69: "e",
    70: "f",
    71: "g",
    72: "h",
    73: "i",
    74: "j",
    75: "k",
    76: "l",
    77: "m",
    78: "n",
    79: "o",
    80: "p",
    81: "q",
    82: "r",
    83: "s",
    84: "t",
    85: "u",
    86: "v",
    87: "w",
    88: "x",
    89: "y",
    90: "z",
    91: "cmd",
    92: "cmd",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "\'",
    224: "cmd"
  };

  for (_ in _keycode_dictionary) {
    key = _keycode_dictionary[_];
    _valid_keys.push(key);
  }

}).call(this);
